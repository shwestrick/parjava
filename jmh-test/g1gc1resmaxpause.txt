# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 8.763 s/op
# Warmup Iteration   2: 11.527 s/op
# Warmup Iteration   3: 5.093 s/op
# Warmup Iteration   4: 7.342 s/op
# Warmup Iteration   5: 8.165 s/op
Iteration   1: 5.757 s/op
Iteration   2: 8.198 s/op
Iteration   3: 5.751 s/op
Iteration   4: 10.703 s/op
Iteration   5: 10.431 s/op
Iteration   6: 13.289 s/op
Iteration   7: 8.151 s/op
Iteration   8: 10.088 s/op
Iteration   9: 10.534 s/op
Iteration  10: 17.165 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  10.007 ±(99.9%) 5.185 s/op [Average]
  (min, avg, max) = (5.751, 10.007, 17.165), stdev = 3.429
  CI (99.9%): [4.822, 15.192] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 10.00% complete, ETA 00:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 1.517 s/op
# Warmup Iteration   2: 1.295 s/op
# Warmup Iteration   3: 1.357 s/op
# Warmup Iteration   4: 1.252 s/op
# Warmup Iteration   5: 1.276 s/op
Iteration   1: 1.252 s/op
Iteration   2: 1.270 s/op
Iteration   3: 1.297 s/op
Iteration   4: 1.271 s/op
Iteration   5: 1.418 s/op
Iteration   6: 1.167 s/op
Iteration   7: 1.501 s/op
Iteration   8: 1.317 s/op
Iteration   9: 1.413 s/op
Iteration  10: 1.461 s/op


Result "org.sample.FibBenchmark.Fib":
  1.337 ±(99.9%) 0.160 s/op [Average]
  (min, avg, max) = (1.167, 1.337, 1.501), stdev = 0.106
  CI (99.9%): [1.176, 1.497] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 20.00% complete, ETA 00:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.514 s/op
# Warmup Iteration   2: 1.233 s/op
# Warmup Iteration   3: 1.119 s/op
# Warmup Iteration   4: 1.137 s/op
# Warmup Iteration   5: 1.144 s/op
Iteration   1: 1.081 s/op
Iteration   2: 1.056 s/op
Iteration   3: 1.119 s/op
Iteration   4: 1.065 s/op
Iteration   5: 1.170 s/op
Iteration   6: 1.148 s/op
Iteration   7: 1.262 s/op
Iteration   8: 1.073 s/op
Iteration   9: 1.066 s/op
Iteration  10: 1.057 s/op


Result "org.sample.FilterBenchmark.Filter":
  1.110 ±(99.9%) 0.101 s/op [Average]
  (min, avg, max) = (1.056, 1.110, 1.262), stdev = 0.067
  CI (99.9%): [1.009, 1.211] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 30.00% complete, ETA 00:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 10.542 s/op
# Warmup Iteration   2: 13.108 s/op
# Warmup Iteration   3: 15.499 s/op
# Warmup Iteration   4: 14.851 s/op
# Warmup Iteration   5: 13.925 s/op
Iteration   1: 15.079 s/op
Iteration   2: 14.486 s/op
Iteration   3: 15.959 s/op
Iteration   4: 13.891 s/op
Iteration   5: 14.773 s/op
Iteration   6: 15.733 s/op
Iteration   7: 19.311 s/op
Iteration   8: 14.151 s/op
Iteration   9: 20.365 s/op
Iteration  10: 8.372 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  15.212 ±(99.9%) 4.901 s/op [Average]
  (min, avg, max) = (8.372, 15.212, 20.365), stdev = 3.242
  CI (99.9%): [10.311, 20.113] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 40.00% complete, ETA 00:19:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.912 s/op
# Warmup Iteration   2: 2.738 s/op
# Warmup Iteration   3: 2.915 s/op
# Warmup Iteration   4: 2.204 s/op
# Warmup Iteration   5: 2.397 s/op
Iteration   1: 2.594 s/op
Iteration   2: 2.398 s/op
Iteration   3: 2.792 s/op
Iteration   4: 2.736 s/op
Iteration   5: 2.628 s/op
Iteration   6: 1.990 s/op
Iteration   7: 2.763 s/op
Iteration   8: 1.936 s/op
Iteration   9: 2.496 s/op
Iteration  10: 2.232 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  2.456 ±(99.9%) 0.472 s/op [Average]
  (min, avg, max) = (1.936, 2.456, 2.792), stdev = 0.312
  CI (99.9%): [1.985, 2.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 50.00% complete, ETA 00:16:18
# Fork: 1 of 1
# Warmup Iteration   1: 5.867 s/op
# Warmup Iteration   2: 5.425 s/op
# Warmup Iteration   3: 5.346 s/op
# Warmup Iteration   4: 5.312 s/op
# Warmup Iteration   5: 5.154 s/op
Iteration   1: 4.949 s/op
Iteration   2: 5.069 s/op
Iteration   3: 4.904 s/op
Iteration   4: 5.088 s/op
Iteration   5: 5.023 s/op
Iteration   6: 5.023 s/op
Iteration   7: 4.886 s/op
Iteration   8: 4.891 s/op
Iteration   9: 5.014 s/op
Iteration  10: 4.884 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  4.973 ±(99.9%) 0.120 s/op [Average]
  (min, avg, max) = (4.884, 4.973, 5.088), stdev = 0.079
  CI (99.9%): [4.853, 5.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 60.00% complete, ETA 00:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 2.034 s/op
# Warmup Iteration   2: 1.650 s/op
# Warmup Iteration   3: 1.721 s/op
# Warmup Iteration   4: 1.833 s/op
# Warmup Iteration   5: 1.841 s/op
Iteration   1: 1.712 s/op
Iteration   2: 1.646 s/op
Iteration   3: 1.686 s/op
Iteration   4: 1.635 s/op
Iteration   5: 1.560 s/op
Iteration   6: 1.692 s/op
Iteration   7: 1.558 s/op
Iteration   8: 1.565 s/op
Iteration   9: 1.661 s/op
Iteration  10: 1.644 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  1.636 ±(99.9%) 0.086 s/op [Average]
  (min, avg, max) = (1.558, 1.636, 1.712), stdev = 0.057
  CI (99.9%): [1.550, 1.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 70.00% complete, ETA 00:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.797 s/op
# Warmup Iteration   2: 6.205 s/op
# Warmup Iteration   3: 5.303 s/op
# Warmup Iteration   4: 6.309 s/op
# Warmup Iteration   5: 4.698 s/op
Iteration   1: 5.214 s/op
Iteration   2: 5.748 s/op
Iteration   3: 5.143 s/op
Iteration   4: 4.866 s/op
Iteration   5: 4.648 s/op
Iteration   6: 5.169 s/op
Iteration   7: 5.572 s/op
Iteration   8: 4.926 s/op
Iteration   9: 4.873 s/op
Iteration  10: 4.796 s/op


Result "org.sample.ScanBenchmark.Scan":
  5.096 ±(99.9%) 0.527 s/op [Average]
  (min, avg, max) = (4.648, 5.096, 5.748), stdev = 0.349
  CI (99.9%): [4.568, 5.623] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 80.00% complete, ETA 00:06:21
# Fork: 1 of 1
# Warmup Iteration   1: 12.770 s/op
# Warmup Iteration   2: 10.789 s/op
# Warmup Iteration   3: 11.993 s/op
# Warmup Iteration   4: 10.683 s/op
# Warmup Iteration   5: 11.178 s/op
Iteration   1: 11.329 s/op
Iteration   2: 11.930 s/op
Iteration   3: 11.471 s/op
Iteration   4: 11.104 s/op
Iteration   5: 11.811 s/op
Iteration   6: 11.614 s/op
Iteration   7: 11.868 s/op
Iteration   8: 12.546 s/op
Iteration   9: 10.706 s/op
Iteration  10: 10.883 s/op


Result "org.sample.SortBenchmark.Sort":
  11.526 ±(99.9%) 0.830 s/op [Average]
  (min, avg, max) = (10.706, 11.526, 12.546), stdev = 0.549
  CI (99.9%): [10.696, 12.356] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 3.335 s/op
# Warmup Iteration   2: 2.788 s/op
# Warmup Iteration   3: 2.618 s/op
# Warmup Iteration   4: 2.517 s/op
# Warmup Iteration   5: 2.238 s/op
Iteration   1: 2.405 s/op
Iteration   2: 2.150 s/op
Iteration   3: 2.355 s/op
Iteration   4: 2.022 s/op
Iteration   5: 2.124 s/op
Iteration   6: 2.064 s/op
Iteration   7: 2.279 s/op
Iteration   8: 2.265 s/op
Iteration   9: 2.295 s/op
Iteration  10: 2.323 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  2.228 ±(99.9%) 0.196 s/op [Average]
  (min, avg, max) = (2.022, 2.228, 2.405), stdev = 0.130
  CI (99.9%): [2.032, 2.424] (assumes normal distribution)


# Run complete. Total time: 00:32:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt   Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  10.007 ± 5.185   s/op
FibBenchmark.Fib                        avgt   10   1.337 ± 0.160   s/op
FilterBenchmark.Filter                  avgt   10   1.110 ± 0.101   s/op
HistogramBenchmark.Histogram            avgt   10  15.212 ± 4.901   s/op
MapMutBenchmark.MapMut                  avgt   10   2.456 ± 0.472   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10   4.973 ± 0.120   s/op
ReduceBenchmark.Reduce                  avgt   10   1.636 ± 0.086   s/op
ScanBenchmark.Scan                      avgt   10   5.096 ± 0.527   s/op
SortBenchmark.Sort                      avgt   10  11.526 ± 0.830   s/op
TabulateBenchmark.Tabulate              avgt   10   2.228 ± 0.196   s/op
