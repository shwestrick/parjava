# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 7.185 s/op
# Warmup Iteration   2: 11.792 s/op
# Warmup Iteration   3: 5.144 s/op
# Warmup Iteration   4: 6.845 s/op
# Warmup Iteration   5: 7.872 s/op
Iteration   1: 6.120 s/op
Iteration   2: 10.917 s/op
Iteration   3: 16.547 s/op
Iteration   4: 5.827 s/op
Iteration   5: 8.693 s/op
Iteration   6: 11.459 s/op
Iteration   7: 7.455 s/op
Iteration   8: 8.789 s/op
Iteration   9: 14.866 s/op
Iteration  10: 15.564 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  10.624 ±(99.9%) 5.935 s/op [Average]
  (min, avg, max) = (5.827, 10.624, 16.547), stdev = 3.926
  CI (99.9%): [4.689, 16.559] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 9.09% complete, ETA 00:38:23
# Fork: 1 of 1
# Warmup Iteration   1: 1.589 s/op
# Warmup Iteration   2: 1.107 s/op
# Warmup Iteration   3: 1.395 s/op
# Warmup Iteration   4: 1.209 s/op
# Warmup Iteration   5: 1.382 s/op
Iteration   1: 1.137 s/op
Iteration   2: 1.431 s/op
Iteration   3: 1.313 s/op
Iteration   4: 1.302 s/op
Iteration   5: 1.459 s/op
Iteration   6: 1.403 s/op
Iteration   7: 1.305 s/op
Iteration   8: 1.355 s/op
Iteration   9: 1.373 s/op
Iteration  10: 1.418 s/op


Result "org.sample.FibBenchmark.Fib":
  1.350 ±(99.9%) 0.140 s/op [Average]
  (min, avg, max) = (1.137, 1.350, 1.459), stdev = 0.093
  CI (99.9%): [1.209, 1.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 18.18% complete, ETA 00:29:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.679 s/op
# Warmup Iteration   2: 1.409 s/op
# Warmup Iteration   3: 1.264 s/op
# Warmup Iteration   4: 1.111 s/op
# Warmup Iteration   5: 1.047 s/op
Iteration   1: 0.973 s/op
Iteration   2: 1.103 s/op
Iteration   3: 1.154 s/op
Iteration   4: 1.003 s/op
Iteration   5: 1.126 s/op
Iteration   6: 1.149 s/op
Iteration   7: 1.264 s/op
Iteration   8: 1.239 s/op
Iteration   9: 1.197 s/op
Iteration  10: 1.127 s/op


Result "org.sample.FilterBenchmark.Filter":
  1.134 ±(99.9%) 0.140 s/op [Average]
  (min, avg, max) = (0.973, 1.134, 1.264), stdev = 0.092
  CI (99.9%): [0.994, 1.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 27.27% complete, ETA 00:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 9.602 s/op
# Warmup Iteration   2: 13.092 s/op
# Warmup Iteration   3: 13.547 s/op
# Warmup Iteration   4: 13.749 s/op
# Warmup Iteration   5: 13.813 s/op
Iteration   1: 16.944 s/op
Iteration   2: 12.452 s/op
Iteration   3: 12.285 s/op
Iteration   4: 15.464 s/op
Iteration   5: 16.081 s/op
Iteration   6: 15.028 s/op
Iteration   7: 20.665 s/op
Iteration   8: 12.119 s/op
Iteration   9: 12.782 s/op
Iteration  10: 13.137 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  14.696 ±(99.9%) 4.122 s/op [Average]
  (min, avg, max) = (12.119, 14.696, 20.665), stdev = 2.726
  CI (99.9%): [10.574, 18.817] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 36.36% complete, ETA 00:22:48
# Fork: 1 of 1
# Warmup Iteration   1: 3.556 s/op
# Warmup Iteration   2: 3.228 s/op
# Warmup Iteration   3: 3.260 s/op
# Warmup Iteration   4: 2.289 s/op
# Warmup Iteration   5: 2.971 s/op
Iteration   1: 2.467 s/op
Iteration   2: 2.558 s/op
Iteration   3: 2.521 s/op
Iteration   4: 2.653 s/op
Iteration   5: 2.198 s/op
Iteration   6: 2.332 s/op
Iteration   7: 2.223 s/op
Iteration   8: 2.429 s/op
Iteration   9: 2.390 s/op
Iteration  10: 2.462 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  2.423 ±(99.9%) 0.216 s/op [Average]
  (min, avg, max) = (2.198, 2.423, 2.653), stdev = 0.143
  CI (99.9%): [2.207, 2.640] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 45.45% complete, ETA 00:19:32
# Fork: 1 of 1
# Warmup Iteration   1: 6.308 s/op
# Warmup Iteration   2: 5.796 s/op
# Warmup Iteration   3: 5.925 s/op
# Warmup Iteration   4: 6.073 s/op
# Warmup Iteration   5: 5.928 s/op
Iteration   1: 5.797 s/op
Iteration   2: 5.773 s/op
Iteration   3: 6.141 s/op
Iteration   4: 5.782 s/op
Iteration   5: 5.782 s/op
Iteration   6: 5.795 s/op
Iteration   7: 5.959 s/op
Iteration   8: 6.055 s/op
Iteration   9: 5.916 s/op
Iteration  10: 5.937 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  5.894 ±(99.9%) 0.197 s/op [Average]
  (min, avg, max) = (5.773, 5.894, 6.141), stdev = 0.130
  CI (99.9%): [5.697, 6.090] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.OurTabulateBenchmark.OurTabulate

# Run progress: 54.55% complete, ETA 00:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.858 s/op
# Warmup Iteration   2: 3.038 s/op
# Warmup Iteration   3: 2.703 s/op
# Warmup Iteration   4: 2.597 s/op
# Warmup Iteration   5: 2.348 s/op
Iteration   1: 2.297 s/op
Iteration   2: 2.184 s/op
Iteration   3: 2.322 s/op
Iteration   4: 2.243 s/op
Iteration   5: 2.345 s/op
Iteration   6: 2.603 s/op
Iteration   7: 2.424 s/op
Iteration   8: 2.254 s/op
Iteration   9: 2.229 s/op
Iteration  10: 2.114 s/op


Result "org.sample.OurTabulateBenchmark.OurTabulate":
  2.301 ±(99.9%) 0.207 s/op [Average]
  (min, avg, max) = (2.114, 2.301, 2.603), stdev = 0.137
  CI (99.9%): [2.095, 2.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 63.64% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 2.016 s/op
# Warmup Iteration   2: 1.608 s/op
# Warmup Iteration   3: 1.798 s/op
# Warmup Iteration   4: 1.711 s/op
# Warmup Iteration   5: 1.622 s/op
Iteration   1: 1.655 s/op
Iteration   2: 1.718 s/op
Iteration   3: 1.707 s/op
Iteration   4: 1.851 s/op
Iteration   5: 1.580 s/op
Iteration   6: 1.588 s/op
Iteration   7: 1.678 s/op
Iteration   8: 1.619 s/op
Iteration   9: 1.615 s/op
Iteration  10: 1.649 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  1.666 ±(99.9%) 0.121 s/op [Average]
  (min, avg, max) = (1.580, 1.666, 1.851), stdev = 0.080
  CI (99.9%): [1.545, 1.787] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 72.73% complete, ETA 00:09:20
# Fork: 1 of 1
# Warmup Iteration   1: 5.126 s/op
# Warmup Iteration   2: 5.079 s/op
# Warmup Iteration   3: 5.079 s/op
# Warmup Iteration   4: 5.125 s/op
# Warmup Iteration   5: 5.029 s/op
Iteration   1: 6.048 s/op
Iteration   2: 5.117 s/op
Iteration   3: 4.366 s/op
Iteration   4: 5.270 s/op
Iteration   5: 5.218 s/op
Iteration   6: 5.323 s/op
Iteration   7: 4.304 s/op
Iteration   8: 3.545 s/op
Iteration   9: 4.542 s/op
Iteration  10: 4.521 s/op


Result "org.sample.ScanBenchmark.Scan":
  4.825 ±(99.9%) 1.066 s/op [Average]
  (min, avg, max) = (3.545, 4.825, 6.048), stdev = 0.705
  CI (99.9%): [3.759, 5.892] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 81.82% complete, ETA 00:06:15
# Fork: 1 of 1
# Warmup Iteration   1: 12.456 s/op
# Warmup Iteration   2: 10.681 s/op
# Warmup Iteration   3: 12.523 s/op
# Warmup Iteration   4: 10.443 s/op
# Warmup Iteration   5: 10.970 s/op
Iteration   1: 12.481 s/op
Iteration   2: 11.692 s/op
Iteration   3: 10.883 s/op
Iteration   4: 11.130 s/op
Iteration   5: 11.347 s/op
Iteration   6: 11.716 s/op
Iteration   7: 11.709 s/op
Iteration   8: 12.405 s/op
Iteration   9: 10.899 s/op
Iteration  10: 11.069 s/op


Result "org.sample.SortBenchmark.Sort":
  11.533 ±(99.9%) 0.871 s/op [Average]
  (min, avg, max) = (10.883, 11.533, 12.481), stdev = 0.576
  CI (99.9%): [10.662, 12.404] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.91% complete, ETA 00:03:12
# Fork: 1 of 1
# Warmup Iteration   1: 3.158 s/op
# Warmup Iteration   2: 2.615 s/op
# Warmup Iteration   3: 2.243 s/op
# Warmup Iteration   4: 2.335 s/op
# Warmup Iteration   5: 2.123 s/op
Iteration   1: 2.217 s/op
Iteration   2: 2.274 s/op
Iteration   3: 2.029 s/op
Iteration   4: 2.306 s/op
Iteration   5: 2.066 s/op
Iteration   6: 2.113 s/op
Iteration   7: 2.070 s/op
Iteration   8: 2.233 s/op
Iteration   9: 2.317 s/op
Iteration  10: 2.132 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  2.176 ±(99.9%) 0.161 s/op [Average]
  (min, avg, max) = (2.029, 2.176, 2.317), stdev = 0.107
  CI (99.9%): [2.015, 2.337] (assumes normal distribution)


# Run complete. Total time: 00:34:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt   Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  10.624 ± 5.935   s/op
FibBenchmark.Fib                        avgt   10   1.350 ± 0.140   s/op
FilterBenchmark.Filter                  avgt   10   1.134 ± 0.140   s/op
HistogramBenchmark.Histogram            avgt   10  14.696 ± 4.122   s/op
MapMutBenchmark.MapMut                  avgt   10   2.423 ± 0.216   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10   5.894 ± 0.197   s/op
OurTabulateBenchmark.OurTabulate        avgt   10   2.301 ± 0.207   s/op
ReduceBenchmark.Reduce                  avgt   10   1.666 ± 0.121   s/op
ScanBenchmark.Scan                      avgt   10   4.825 ± 1.066   s/op
SortBenchmark.Sort                      avgt   10  11.533 ± 0.871   s/op
TabulateBenchmark.Tabulate              avgt   10   2.176 ± 0.161   s/op
