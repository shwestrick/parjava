# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 8.273 s/op
# Warmup Iteration   2: 12.405 s/op
# Warmup Iteration   3: 5.591 s/op
# Warmup Iteration   4: 7.245 s/op
# Warmup Iteration   5: 7.050 s/op
Iteration   1: 5.733 s/op
Iteration   2: 10.477 s/op
Iteration   3: 19.093 s/op
Iteration   4: 6.045 s/op
Iteration   5: 10.495 s/op
Iteration   6: 10.434 s/op
Iteration   7: 12.823 s/op
Iteration   8: 7.926 s/op
Iteration   9: 10.444 s/op
Iteration  10: 10.343 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  10.381 ±(99.9%) 5.709 s/op [Average]
  (min, avg, max) = (5.733, 10.381, 19.093), stdev = 3.776
  CI (99.9%): [4.672, 16.090] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 9.09% complete, ETA 00:35:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.339 s/op
# Warmup Iteration   2: 1.112 s/op
# Warmup Iteration   3: 1.160 s/op
# Warmup Iteration   4: 1.254 s/op
# Warmup Iteration   5: 1.402 s/op
Iteration   1: 1.148 s/op
Iteration   2: 1.339 s/op
Iteration   3: 1.369 s/op
Iteration   4: 1.288 s/op
Iteration   5: 1.273 s/op
Iteration   6: 1.411 s/op
Iteration   7: 1.222 s/op
Iteration   8: 1.183 s/op
Iteration   9: 1.101 s/op
Iteration  10: 1.106 s/op


Result "org.sample.FibBenchmark.Fib":
  1.244 ±(99.9%) 0.166 s/op [Average]
  (min, avg, max) = (1.101, 1.244, 1.411), stdev = 0.110
  CI (99.9%): [1.078, 1.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 18.18% complete, ETA 00:28:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.557 s/op
# Warmup Iteration   2: 1.191 s/op
# Warmup Iteration   3: 1.221 s/op
# Warmup Iteration   4: 1.235 s/op
# Warmup Iteration   5: 1.156 s/op
Iteration   1: 0.911 s/op
Iteration   2: 0.940 s/op
Iteration   3: 0.976 s/op
Iteration   4: 0.948 s/op
Iteration   5: 0.985 s/op
Iteration   6: 1.049 s/op
Iteration   7: 0.975 s/op
Iteration   8: 1.097 s/op
Iteration   9: 1.051 s/op
Iteration  10: 0.959 s/op


Result "org.sample.FilterBenchmark.Filter":
  0.989 ±(99.9%) 0.088 s/op [Average]
  (min, avg, max) = (0.911, 0.989, 1.097), stdev = 0.058
  CI (99.9%): [0.901, 1.077] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 27.27% complete, ETA 00:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 10.022 s/op
# Warmup Iteration   2: 13.535 s/op
# Warmup Iteration   3: 16.362 s/op
# Warmup Iteration   4: 16.092 s/op
# Warmup Iteration   5: 15.760 s/op
Iteration   1: 22.056 s/op
Iteration   2: 21.058 s/op
Iteration   3: 11.032 s/op
Iteration   4: 17.784 s/op
Iteration   5: 14.714 s/op
Iteration   6: 22.027 s/op
Iteration   7: 12.777 s/op
Iteration   8: 13.475 s/op
Iteration   9: 13.896 s/op
Iteration  10: 15.699 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  16.452 ±(99.9%) 6.117 s/op [Average]
  (min, avg, max) = (11.032, 16.452, 22.056), stdev = 4.046
  CI (99.9%): [10.335, 22.569] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 36.36% complete, ETA 00:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 4.080 s/op
# Warmup Iteration   2: 2.918 s/op
# Warmup Iteration   3: 2.754 s/op
# Warmup Iteration   4: 2.110 s/op
# Warmup Iteration   5: 2.857 s/op
Iteration   1: 2.307 s/op
Iteration   2: 2.538 s/op
Iteration   3: 2.258 s/op
Iteration   4: 2.651 s/op
Iteration   5: 2.346 s/op
Iteration   6: 2.504 s/op
Iteration   7: 2.029 s/op
Iteration   8: 2.618 s/op
Iteration   9: 1.977 s/op
Iteration  10: 2.578 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  2.381 ±(99.9%) 0.362 s/op [Average]
  (min, avg, max) = (1.977, 2.381, 2.651), stdev = 0.240
  CI (99.9%): [2.018, 2.743] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 45.45% complete, ETA 00:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 5.694 s/op
# Warmup Iteration   2: 5.472 s/op
# Warmup Iteration   3: 5.218 s/op
# Warmup Iteration   4: 5.290 s/op
# Warmup Iteration   5: 5.302 s/op
Iteration   1: 5.483 s/op
Iteration   2: 5.292 s/op
Iteration   3: 5.327 s/op
Iteration   4: 5.302 s/op
Iteration   5: 5.328 s/op
Iteration   6: 5.188 s/op
Iteration   7: 5.084 s/op
Iteration   8: 5.062 s/op
Iteration   9: 5.019 s/op
Iteration  10: 5.029 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  5.211 ±(99.9%) 0.239 s/op [Average]
  (min, avg, max) = (5.019, 5.211, 5.483), stdev = 0.158
  CI (99.9%): [4.972, 5.450] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.OurTabulateBenchmark.OurTabulate

# Run progress: 54.55% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: 3.984 s/op
# Warmup Iteration   2: 3.336 s/op
# Warmup Iteration   3: 2.822 s/op
# Warmup Iteration   4: 2.459 s/op
# Warmup Iteration   5: 2.355 s/op
Iteration   1: 2.070 s/op
Iteration   2: 2.085 s/op
Iteration   3: 2.174 s/op
Iteration   4: 2.269 s/op
Iteration   5: 2.516 s/op
Iteration   6: 2.250 s/op
Iteration   7: 2.256 s/op
Iteration   8: 2.027 s/op
Iteration   9: 2.033 s/op
Iteration  10: 2.063 s/op


Result "org.sample.OurTabulateBenchmark.OurTabulate":
  2.174 ±(99.9%) 0.231 s/op [Average]
  (min, avg, max) = (2.027, 2.174, 2.516), stdev = 0.153
  CI (99.9%): [1.943, 2.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 63.64% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 2.250 s/op
# Warmup Iteration   2: 1.885 s/op
# Warmup Iteration   3: 1.880 s/op
# Warmup Iteration   4: 1.736 s/op
# Warmup Iteration   5: 1.791 s/op
Iteration   1: 1.826 s/op
Iteration   2: 1.948 s/op
Iteration   3: 1.521 s/op
Iteration   4: 1.734 s/op
Iteration   5: 1.713 s/op
Iteration   6: 1.570 s/op
Iteration   7: 1.669 s/op
Iteration   8: 1.668 s/op
Iteration   9: 1.513 s/op
Iteration  10: 1.424 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  1.659 ±(99.9%) 0.238 s/op [Average]
  (min, avg, max) = (1.424, 1.659, 1.948), stdev = 0.158
  CI (99.9%): [1.420, 1.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 72.73% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 5.757 s/op
# Warmup Iteration   2: 5.997 s/op
# Warmup Iteration   3: 6.059 s/op
# Warmup Iteration   4: 6.856 s/op
# Warmup Iteration   5: 5.054 s/op
Iteration   1: 5.971 s/op
Iteration   2: 6.133 s/op
Iteration   3: 7.274 s/op
Iteration   4: 5.642 s/op
Iteration   5: 5.027 s/op
Iteration   6: 5.463 s/op
Iteration   7: 5.037 s/op
Iteration   8: 5.989 s/op
Iteration   9: 5.489 s/op
Iteration  10: 5.266 s/op


Result "org.sample.ScanBenchmark.Scan":
  5.729 ±(99.9%) 1.008 s/op [Average]
  (min, avg, max) = (5.027, 5.729, 7.274), stdev = 0.667
  CI (99.9%): [4.721, 6.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 81.82% complete, ETA 00:06:11
# Fork: 1 of 1
# Warmup Iteration   1: 12.309 s/op
# Warmup Iteration   2: 10.686 s/op
# Warmup Iteration   3: 11.208 s/op
# Warmup Iteration   4: 11.030 s/op
# Warmup Iteration   5: 11.136 s/op
Iteration   1: 11.440 s/op
Iteration   2: 12.417 s/op
Iteration   3: 11.362 s/op
Iteration   4: 11.244 s/op
Iteration   5: 11.735 s/op
Iteration   6: 11.642 s/op
Iteration   7: 11.586 s/op
Iteration   8: 11.666 s/op
Iteration   9: 10.786 s/op
Iteration  10: 11.456 s/op


Result "org.sample.SortBenchmark.Sort":
  11.533 ±(99.9%) 0.625 s/op [Average]
  (min, avg, max) = (10.786, 11.533, 12.417), stdev = 0.414
  CI (99.9%): [10.908, 12.159] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.91% complete, ETA 00:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 3.315 s/op
# Warmup Iteration   2: 2.843 s/op
# Warmup Iteration   3: 2.605 s/op
# Warmup Iteration   4: 2.640 s/op
# Warmup Iteration   5: 2.560 s/op
Iteration   1: 2.232 s/op
Iteration   2: 2.269 s/op
Iteration   3: 2.274 s/op
Iteration   4: 2.093 s/op
Iteration   5: 2.109 s/op
Iteration   6: 1.903 s/op
Iteration   7: 2.150 s/op
Iteration   8: 2.020 s/op
Iteration   9: 2.013 s/op
Iteration  10: 2.040 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  2.110 ±(99.9%) 0.185 s/op [Average]
  (min, avg, max) = (1.903, 2.110, 2.274), stdev = 0.122
  CI (99.9%): [1.926, 2.295] (assumes normal distribution)


# Run complete. Total time: 00:34:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt   Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  10.381 ± 5.709   s/op
FibBenchmark.Fib                        avgt   10   1.244 ± 0.166   s/op
FilterBenchmark.Filter                  avgt   10   0.989 ± 0.088   s/op
HistogramBenchmark.Histogram            avgt   10  16.452 ± 6.117   s/op
MapMutBenchmark.MapMut                  avgt   10   2.381 ± 0.362   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10   5.211 ± 0.239   s/op
OurTabulateBenchmark.OurTabulate        avgt   10   2.174 ± 0.231   s/op
ReduceBenchmark.Reduce                  avgt   10   1.659 ± 0.238   s/op
ScanBenchmark.Scan                      avgt   10   5.729 ± 1.008   s/op
SortBenchmark.Sort                      avgt   10  11.533 ± 0.625   s/op
TabulateBenchmark.Tabulate              avgt   10   2.110 ± 0.185   s/op
