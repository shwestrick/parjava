# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.780 s/op
# Warmup Iteration   2: 0.689 s/op
# Warmup Iteration   3: 0.674 s/op
# Warmup Iteration   4: 0.775 s/op
# Warmup Iteration   5: 0.731 s/op
Iteration   1: 0.716 s/op
Iteration   2: 0.679 s/op
Iteration   3: 0.704 s/op
Iteration   4: 0.641 s/op
Iteration   5: 0.663 s/op
Iteration   6: 0.583 s/op
Iteration   7: 0.669 s/op
Iteration   8: 0.639 s/op
Iteration   9: 0.647 s/op
Iteration  10: 0.570 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  0.651 ±(99.9%) 0.071 s/op [Average]
  (min, avg, max) = (0.570, 0.651, 0.716), stdev = 0.047
  CI (99.9%): [0.580, 0.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 10.00% complete, ETA 00:23:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 s/op
# Warmup Iteration   2: 0.042 s/op
# Warmup Iteration   3: 0.041 s/op
# Warmup Iteration   4: 0.042 s/op
# Warmup Iteration   5: 0.042 s/op
Iteration   1: 0.041 s/op
Iteration   2: 0.042 s/op
Iteration   3: 0.043 s/op
Iteration   4: 0.043 s/op
Iteration   5: 0.043 s/op
Iteration   6: 0.043 s/op
Iteration   7: 0.043 s/op
Iteration   8: 0.042 s/op
Iteration   9: 0.043 s/op
Iteration  10: 0.044 s/op


Result "org.sample.FibBenchmark.Fib":
  0.043 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.041, 0.043, 0.044), stdev = 0.001
  CI (99.9%): [0.041, 0.044] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 20.00% complete, ETA 00:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 s/op
# Warmup Iteration   2: 0.100 s/op
# Warmup Iteration   3: 0.104 s/op
# Warmup Iteration   4: 0.100 s/op
# Warmup Iteration   5: 0.101 s/op
Iteration   1: 0.104 s/op
Iteration   2: 0.120 s/op
Iteration   3: 0.106 s/op
Iteration   4: 0.113 s/op
Iteration   5: 0.120 s/op
Iteration   6: 0.117 s/op
Iteration   7: 0.121 s/op
Iteration   8: 0.118 s/op
Iteration   9: 0.134 s/op
Iteration  10: 0.122 s/op


Result "org.sample.FilterBenchmark.Filter":
  0.118 ±(99.9%) 0.013 s/op [Average]
  (min, avg, max) = (0.104, 0.118, 0.134), stdev = 0.009
  CI (99.9%): [0.105, 0.130] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 30.00% complete, ETA 00:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.330 s/op
# Warmup Iteration   2: 1.313 s/op
# Warmup Iteration   3: 1.060 s/op
# Warmup Iteration   4: 1.409 s/op
# Warmup Iteration   5: 1.186 s/op
Iteration   1: 0.998 s/op
Iteration   2: 1.136 s/op
Iteration   3: 1.192 s/op
Iteration   4: 0.968 s/op
Iteration   5: 1.036 s/op
Iteration   6: 0.926 s/op
Iteration   7: 1.003 s/op
Iteration   8: 1.128 s/op
Iteration   9: 1.143 s/op
Iteration  10: 1.015 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  1.054 ±(99.9%) 0.134 s/op [Average]
  (min, avg, max) = (0.926, 1.054, 1.192), stdev = 0.088
  CI (99.9%): [0.921, 1.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 40.00% complete, ETA 00:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.505 s/op
# Warmup Iteration   2: 0.336 s/op
# Warmup Iteration   3: 0.257 s/op
# Warmup Iteration   4: 0.488 s/op
# Warmup Iteration   5: 0.148 s/op
Iteration   1: 0.323 s/op
Iteration   2: 0.418 s/op
Iteration   3: 0.430 s/op
Iteration   4: 0.611 s/op
Iteration   5: 0.212 s/op
Iteration   6: 0.472 s/op
Iteration   7: 0.391 s/op
Iteration   8: 0.471 s/op
Iteration   9: 0.385 s/op
Iteration  10: 0.396 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  0.411 ±(99.9%) 0.157 s/op [Average]
  (min, avg, max) = (0.212, 0.411, 0.611), stdev = 0.104
  CI (99.9%): [0.254, 0.568] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 50.00% complete, ETA 00:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.338 s/op
# Warmup Iteration   2: 0.296 s/op
# Warmup Iteration   3: 0.302 s/op
# Warmup Iteration   4: 0.295 s/op
# Warmup Iteration   5: 0.298 s/op
Iteration   1: 0.309 s/op
Iteration   2: 0.309 s/op
Iteration   3: 0.304 s/op
Iteration   4: 0.308 s/op
Iteration   5: 0.304 s/op
Iteration   6: 0.302 s/op
Iteration   7: 0.302 s/op
Iteration   8: 0.303 s/op
Iteration   9: 0.308 s/op
Iteration  10: 0.310 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  0.306 ±(99.9%) 0.005 s/op [Average]
  (min, avg, max) = (0.302, 0.306, 0.310), stdev = 0.003
  CI (99.9%): [0.301, 0.311] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 60.00% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.083 s/op
# Warmup Iteration   2: 0.072 s/op
# Warmup Iteration   3: 0.070 s/op
# Warmup Iteration   4: 0.072 s/op
# Warmup Iteration   5: 0.071 s/op
Iteration   1: 0.072 s/op
Iteration   2: 0.072 s/op
Iteration   3: 0.073 s/op
Iteration   4: 0.073 s/op
Iteration   5: 0.074 s/op
Iteration   6: 0.073 s/op
Iteration   7: 0.073 s/op
Iteration   8: 0.071 s/op
Iteration   9: 0.072 s/op
Iteration  10: 0.074 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  0.073 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.071, 0.073, 0.074), stdev = 0.001
  CI (99.9%): [0.072, 0.074] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 70.00% complete, ETA 00:07:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.251 s/op
# Warmup Iteration   2: 1.232 s/op
# Warmup Iteration   3: 1.135 s/op
# Warmup Iteration   4: 0.911 s/op
# Warmup Iteration   5: 1.003 s/op
Iteration   1: 1.005 s/op
Iteration   2: 1.083 s/op
Iteration   3: 1.025 s/op
Iteration   4: 1.036 s/op
Iteration   5: 1.006 s/op
Iteration   6: 1.047 s/op
Iteration   7: 0.849 s/op
Iteration   8: 1.135 s/op
Iteration   9: 1.044 s/op
Iteration  10: 1.065 s/op


Result "org.sample.ScanBenchmark.Scan":
  1.030 ±(99.9%) 0.112 s/op [Average]
  (min, avg, max) = (0.849, 1.030, 1.135), stdev = 0.074
  CI (99.9%): [0.918, 1.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 80.00% complete, ETA 00:05:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.707 s/op
# Warmup Iteration   2: 0.433 s/op
# Warmup Iteration   3: 0.492 s/op
# Warmup Iteration   4: 0.454 s/op
# Warmup Iteration   5: 0.497 s/op
Iteration   1: 0.503 s/op
Iteration   2: 0.517 s/op
Iteration   3: 0.458 s/op
Iteration   4: 0.511 s/op
Iteration   5: 0.462 s/op
Iteration   6: 0.563 s/op
Iteration   7: 0.458 s/op
Iteration   8: 0.487 s/op
Iteration   9: 0.488 s/op
Iteration  10: 0.531 s/op


Result "org.sample.SortBenchmark.Sort":
  0.498 ±(99.9%) 0.052 s/op [Average]
  (min, avg, max) = (0.458, 0.498, 0.563), stdev = 0.034
  CI (99.9%): [0.446, 0.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -XX:MaxGCPauseMillis=1000 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.00% complete, ETA 00:02:37
# Fork: 1 of 1
# Warmup Iteration   1: 1.127 s/op
# Warmup Iteration   2: 0.910 s/op
# Warmup Iteration   3: 0.763 s/op
# Warmup Iteration   4: 0.842 s/op
# Warmup Iteration   5: 0.774 s/op
Iteration   1: 0.793 s/op
Iteration   2: 0.751 s/op
Iteration   3: 0.692 s/op
Iteration   4: 0.681 s/op
Iteration   5: 0.632 s/op
Iteration   6: 0.740 s/op
Iteration   7: 0.611 s/op
Iteration   8: 0.721 s/op
Iteration   9: 0.645 s/op
Iteration  10: 0.645 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  0.691 ±(99.9%) 0.089 s/op [Average]
  (min, avg, max) = (0.611, 0.691, 0.793), stdev = 0.059
  CI (99.9%): [0.602, 0.781] (assumes normal distribution)


# Run complete. Total time: 00:26:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt  Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  0.651 ± 0.071   s/op
FibBenchmark.Fib                        avgt   10  0.043 ± 0.001   s/op
FilterBenchmark.Filter                  avgt   10  0.118 ± 0.013   s/op
HistogramBenchmark.Histogram            avgt   10  1.054 ± 0.134   s/op
MapMutBenchmark.MapMut                  avgt   10  0.411 ± 0.157   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10  0.306 ± 0.005   s/op
ReduceBenchmark.Reduce                  avgt   10  0.073 ± 0.001   s/op
ScanBenchmark.Scan                      avgt   10  1.030 ± 0.112   s/op
SortBenchmark.Sort                      avgt   10  0.498 ± 0.052   s/op
TabulateBenchmark.Tabulate              avgt   10  0.691 ± 0.089   s/op
