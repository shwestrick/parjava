# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.674 s/op
# Warmup Iteration   2: 0.730 s/op
# Warmup Iteration   3: 0.606 s/op
# Warmup Iteration   4: 0.728 s/op
# Warmup Iteration   5: 0.700 s/op
Iteration   1: 0.694 s/op
Iteration   2: 0.697 s/op
Iteration   3: 0.692 s/op
Iteration   4: 0.594 s/op
Iteration   5: 0.789 s/op
Iteration   6: 0.645 s/op
Iteration   7: 0.633 s/op
Iteration   8: 0.720 s/op
Iteration   9: 0.644 s/op
Iteration  10: 0.691 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  0.680 ±(99.9%) 0.082 s/op [Average]
  (min, avg, max) = (0.594, 0.680, 0.789), stdev = 0.054
  CI (99.9%): [0.598, 0.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 9.09% complete, ETA 00:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 s/op
# Warmup Iteration   2: 0.043 s/op
# Warmup Iteration   3: 0.043 s/op
# Warmup Iteration   4: 0.043 s/op
# Warmup Iteration   5: 0.043 s/op
Iteration   1: 0.044 s/op
Iteration   2: 0.043 s/op
Iteration   3: 0.043 s/op
Iteration   4: 0.043 s/op
Iteration   5: 0.044 s/op
Iteration   6: 0.043 s/op
Iteration   7: 0.043 s/op
Iteration   8: 0.043 s/op
Iteration   9: 0.043 s/op
Iteration  10: 0.043 s/op


Result "org.sample.FibBenchmark.Fib":
  0.043 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.043, 0.043, 0.044), stdev = 0.001
  CI (99.9%): [0.042, 0.044] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 18.18% complete, ETA 00:23:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.118 s/op
# Warmup Iteration   2: 0.092 s/op
# Warmup Iteration   3: 0.091 s/op
# Warmup Iteration   4: 0.097 s/op
# Warmup Iteration   5: 0.092 s/op
Iteration   1: 0.095 s/op
Iteration   2: 0.088 s/op
Iteration   3: 0.084 s/op
Iteration   4: 0.083 s/op
Iteration   5: 0.083 s/op
Iteration   6: 0.085 s/op
Iteration   7: 0.094 s/op
Iteration   8: 0.083 s/op
Iteration   9: 0.083 s/op
Iteration  10: 0.082 s/op


Result "org.sample.FilterBenchmark.Filter":
  0.086 ±(99.9%) 0.007 s/op [Average]
  (min, avg, max) = (0.082, 0.086, 0.095), stdev = 0.005
  CI (99.9%): [0.079, 0.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 27.27% complete, ETA 00:20:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.435 s/op
# Warmup Iteration   2: 1.172 s/op
# Warmup Iteration   3: 0.994 s/op
# Warmup Iteration   4: 0.972 s/op
# Warmup Iteration   5: 1.169 s/op
Iteration   1: 1.080 s/op
Iteration   2: 1.007 s/op
Iteration   3: 1.086 s/op
Iteration   4: 1.194 s/op
Iteration   5: 1.194 s/op
Iteration   6: 0.918 s/op
Iteration   7: 1.309 s/op
Iteration   8: 1.048 s/op
Iteration   9: 1.127 s/op
Iteration  10: 1.005 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  1.097 ±(99.9%) 0.172 s/op [Average]
  (min, avg, max) = (0.918, 1.097, 1.309), stdev = 0.114
  CI (99.9%): [0.925, 1.268] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 36.36% complete, ETA 00:18:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.838 s/op
# Warmup Iteration   2: 0.460 s/op
# Warmup Iteration   3: 0.354 s/op
# Warmup Iteration   4: 0.416 s/op
# Warmup Iteration   5: 0.436 s/op
Iteration   1: 0.370 s/op
Iteration   2: 0.407 s/op
Iteration   3: 0.352 s/op
Iteration   4: 0.392 s/op
Iteration   5: 0.376 s/op
Iteration   6: 0.343 s/op
Iteration   7: 0.418 s/op
Iteration   8: 0.388 s/op
Iteration   9: 0.435 s/op
Iteration  10: 0.415 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  0.390 ±(99.9%) 0.045 s/op [Average]
  (min, avg, max) = (0.343, 0.390, 0.435), stdev = 0.030
  CI (99.9%): [0.344, 0.435] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 45.45% complete, ETA 00:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.209 s/op
# Warmup Iteration   2: 0.180 s/op
# Warmup Iteration   3: 0.182 s/op
# Warmup Iteration   4: 0.178 s/op
# Warmup Iteration   5: 0.177 s/op
Iteration   1: 0.175 s/op
Iteration   2: 0.177 s/op
Iteration   3: 0.176 s/op
Iteration   4: 0.176 s/op
Iteration   5: 0.176 s/op
Iteration   6: 0.177 s/op
Iteration   7: 0.176 s/op
Iteration   8: 0.176 s/op
Iteration   9: 0.176 s/op
Iteration  10: 0.176 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  0.176 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.175, 0.176, 0.177), stdev = 0.001
  CI (99.9%): [0.175, 0.177] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.OurTabulateBenchmark.OurTabulate

# Run progress: 54.55% complete, ETA 00:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 1.298 s/op
# Warmup Iteration   2: 0.985 s/op
# Warmup Iteration   3: 0.864 s/op
# Warmup Iteration   4: 0.945 s/op
# Warmup Iteration   5: 1.002 s/op
Iteration   1: 0.876 s/op
Iteration   2: 0.944 s/op
Iteration   3: 1.031 s/op
Iteration   4: 1.031 s/op
Iteration   5: 1.082 s/op
Iteration   6: 1.005 s/op
Iteration   7: 1.019 s/op
Iteration   8: 1.019 s/op
Iteration   9: 1.059 s/op
Iteration  10: 0.915 s/op


Result "org.sample.OurTabulateBenchmark.OurTabulate":
  0.998 ±(99.9%) 0.099 s/op [Average]
  (min, avg, max) = (0.876, 0.998, 1.082), stdev = 0.066
  CI (99.9%): [0.899, 1.097] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 63.64% complete, ETA 00:10:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 s/op
# Warmup Iteration   2: 0.084 s/op
# Warmup Iteration   3: 0.084 s/op
# Warmup Iteration   4: 0.082 s/op
# Warmup Iteration   5: 0.084 s/op
Iteration   1: 0.080 s/op
Iteration   2: 0.080 s/op
Iteration   3: 0.077 s/op
Iteration   4: 0.078 s/op
Iteration   5: 0.078 s/op
Iteration   6: 0.077 s/op
Iteration   7: 0.078 s/op
Iteration   8: 0.078 s/op
Iteration   9: 0.078 s/op
Iteration  10: 0.078 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  0.078 ±(99.9%) 0.002 s/op [Average]
  (min, avg, max) = (0.077, 0.078, 0.080), stdev = 0.001
  CI (99.9%): [0.077, 0.080] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 72.73% complete, ETA 00:07:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.441 s/op
# Warmup Iteration   2: 1.137 s/op
# Warmup Iteration   3: 1.097 s/op
# Warmup Iteration   4: 1.100 s/op
# Warmup Iteration   5: 1.160 s/op
Iteration   1: 1.210 s/op
Iteration   2: 1.216 s/op
Iteration   3: 1.073 s/op
Iteration   4: 1.181 s/op
Iteration   5: 1.086 s/op
Iteration   6: 0.994 s/op
Iteration   7: 1.192 s/op
Iteration   8: 1.284 s/op
Iteration   9: 1.096 s/op
Iteration  10: 1.076 s/op


Result "org.sample.ScanBenchmark.Scan":
  1.141 ±(99.9%) 0.134 s/op [Average]
  (min, avg, max) = (0.994, 1.141, 1.284), stdev = 0.089
  CI (99.9%): [1.007, 1.275] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 81.82% complete, ETA 00:05:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.753 s/op
# Warmup Iteration   2: 0.443 s/op
# Warmup Iteration   3: 0.549 s/op
# Warmup Iteration   4: 0.467 s/op
# Warmup Iteration   5: 0.521 s/op
Iteration   1: 0.453 s/op
Iteration   2: 0.574 s/op
Iteration   3: 0.453 s/op
Iteration   4: 0.455 s/op
Iteration   5: 0.537 s/op
Iteration   6: 0.438 s/op
Iteration   7: 0.501 s/op
Iteration   8: 0.451 s/op
Iteration   9: 0.486 s/op
Iteration  10: 0.457 s/op


Result "org.sample.SortBenchmark.Sort":
  0.480 ±(99.9%) 0.067 s/op [Average]
  (min, avg, max) = (0.438, 0.480, 0.574), stdev = 0.044
  CI (99.9%): [0.413, 0.548] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.91% complete, ETA 00:02:37
# Fork: 1 of 1
# Warmup Iteration   1: 1.279 s/op
# Warmup Iteration   2: 0.927 s/op
# Warmup Iteration   3: 0.898 s/op
# Warmup Iteration   4: 0.905 s/op
# Warmup Iteration   5: 0.921 s/op
Iteration   1: 0.949 s/op
Iteration   2: 0.930 s/op
Iteration   3: 0.968 s/op
Iteration   4: 1.012 s/op
Iteration   5: 0.892 s/op
Iteration   6: 0.935 s/op
Iteration   7: 0.893 s/op
Iteration   8: 0.944 s/op
Iteration   9: 0.975 s/op
Iteration  10: 0.926 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  0.943 ±(99.9%) 0.055 s/op [Average]
  (min, avg, max) = (0.892, 0.943, 1.012), stdev = 0.037
  CI (99.9%): [0.887, 0.998] (assumes normal distribution)


# Run complete. Total time: 00:28:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt  Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  0.680 ± 0.082   s/op
FibBenchmark.Fib                        avgt   10  0.043 ± 0.001   s/op
FilterBenchmark.Filter                  avgt   10  0.086 ± 0.007   s/op
HistogramBenchmark.Histogram            avgt   10  1.097 ± 0.172   s/op
MapMutBenchmark.MapMut                  avgt   10  0.390 ± 0.045   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10  0.176 ± 0.001   s/op
OurTabulateBenchmark.OurTabulate        avgt   10  0.998 ± 0.099   s/op
ReduceBenchmark.Reduce                  avgt   10  0.078 ± 0.002   s/op
ScanBenchmark.Scan                      avgt   10  1.141 ± 0.134   s/op
SortBenchmark.Sort                      avgt   10  0.480 ± 0.067   s/op
TabulateBenchmark.Tabulate              avgt   10  0.943 ± 0.055   s/op
