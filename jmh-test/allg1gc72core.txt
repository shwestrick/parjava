# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 s/op
# Warmup Iteration   2: 0.731 s/op
# Warmup Iteration   3: 0.689 s/op
# Warmup Iteration   4: 0.742 s/op
# Warmup Iteration   5: 0.683 s/op
Iteration   1: 0.632 s/op
Iteration   2: 0.728 s/op
Iteration   3: 0.699 s/op
Iteration   4: 0.679 s/op
Iteration   5: 0.673 s/op
Iteration   6: 0.605 s/op
Iteration   7: 0.876 s/op
Iteration   8: 0.757 s/op
Iteration   9: 0.646 s/op
Iteration  10: 0.724 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  0.702 ±(99.9%) 0.116 s/op [Average]
  (min, avg, max) = (0.605, 0.702, 0.876), stdev = 0.077
  CI (99.9%): [0.585, 0.818] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 9.09% complete, ETA 00:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 s/op
# Warmup Iteration   2: 0.043 s/op
# Warmup Iteration   3: 0.045 s/op
# Warmup Iteration   4: 0.045 s/op
# Warmup Iteration   5: 0.044 s/op
Iteration   1: 0.045 s/op
Iteration   2: 0.044 s/op
Iteration   3: 0.044 s/op
Iteration   4: 0.043 s/op
Iteration   5: 0.045 s/op
Iteration   6: 0.044 s/op
Iteration   7: 0.044 s/op
Iteration   8: 0.043 s/op
Iteration   9: 0.043 s/op
Iteration  10: 0.043 s/op


Result "org.sample.FibBenchmark.Fib":
  0.044 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.043, 0.044, 0.045), stdev = 0.001
  CI (99.9%): [0.043, 0.045] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 18.18% complete, ETA 00:23:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 s/op
# Warmup Iteration   2: 0.099 s/op
# Warmup Iteration   3: 0.099 s/op
# Warmup Iteration   4: 0.105 s/op
# Warmup Iteration   5: 0.105 s/op
Iteration   1: 0.102 s/op
Iteration   2: 0.117 s/op
Iteration   3: 0.102 s/op
Iteration   4: 0.107 s/op
Iteration   5: 0.108 s/op
Iteration   6: 0.103 s/op
Iteration   7: 0.101 s/op
Iteration   8: 0.107 s/op
Iteration   9: 0.114 s/op
Iteration  10: 0.106 s/op


Result "org.sample.FilterBenchmark.Filter":
  0.107 ±(99.9%) 0.008 s/op [Average]
  (min, avg, max) = (0.101, 0.107, 0.117), stdev = 0.005
  CI (99.9%): [0.099, 0.115] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 27.27% complete, ETA 00:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.332 s/op
# Warmup Iteration   2: 1.208 s/op
# Warmup Iteration   3: 1.045 s/op
# Warmup Iteration   4: 1.020 s/op
# Warmup Iteration   5: 1.240 s/op
Iteration   1: 1.229 s/op
Iteration   2: 1.008 s/op
Iteration   3: 1.101 s/op
Iteration   4: 1.530 s/op
Iteration   5: 1.174 s/op
Iteration   6: 1.468 s/op
Iteration   7: 1.262 s/op
Iteration   8: 1.038 s/op
Iteration   9: 1.292 s/op
Iteration  10: 1.204 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  1.231 ±(99.9%) 0.256 s/op [Average]
  (min, avg, max) = (1.008, 1.231, 1.530), stdev = 0.169
  CI (99.9%): [0.974, 1.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 36.36% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.742 s/op
# Warmup Iteration   2: 0.511 s/op
# Warmup Iteration   3: 0.552 s/op
# Warmup Iteration   4: 0.483 s/op
# Warmup Iteration   5: 0.509 s/op
Iteration   1: 0.391 s/op
Iteration   2: 0.515 s/op
Iteration   3: 0.441 s/op
Iteration   4: 0.403 s/op
Iteration   5: 0.420 s/op
Iteration   6: 0.402 s/op
Iteration   7: 0.349 s/op
Iteration   8: 0.390 s/op
Iteration   9: 0.378 s/op
Iteration  10: 0.410 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  0.410 ±(99.9%) 0.067 s/op [Average]
  (min, avg, max) = (0.349, 0.410, 0.515), stdev = 0.044
  CI (99.9%): [0.343, 0.477] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 45.45% complete, ETA 00:15:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.347 s/op
# Warmup Iteration   2: 0.299 s/op
# Warmup Iteration   3: 0.297 s/op
# Warmup Iteration   4: 0.296 s/op
# Warmup Iteration   5: 0.299 s/op
Iteration   1: 0.304 s/op
Iteration   2: 0.301 s/op
Iteration   3: 0.315 s/op
Iteration   4: 0.307 s/op
Iteration   5: 0.317 s/op
Iteration   6: 0.299 s/op
Iteration   7: 0.306 s/op
Iteration   8: 0.307 s/op
Iteration   9: 0.302 s/op
Iteration  10: 0.308 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  0.307 ±(99.9%) 0.008 s/op [Average]
  (min, avg, max) = (0.299, 0.307, 0.317), stdev = 0.006
  CI (99.9%): [0.298, 0.315] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.OurTabulateBenchmark.OurTabulate

# Run progress: 54.55% complete, ETA 00:13:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.141 s/op
# Warmup Iteration   2: 1.018 s/op
# Warmup Iteration   3: 0.875 s/op
# Warmup Iteration   4: 0.942 s/op
# Warmup Iteration   5: 0.925 s/op
Iteration   1: 0.871 s/op
Iteration   2: 0.917 s/op
Iteration   3: 0.846 s/op
Iteration   4: 0.931 s/op
Iteration   5: 0.850 s/op
Iteration   6: 0.873 s/op
Iteration   7: 0.922 s/op
Iteration   8: 0.939 s/op
Iteration   9: 0.950 s/op
Iteration  10: 0.974 s/op


Result "org.sample.OurTabulateBenchmark.OurTabulate":
  0.907 ±(99.9%) 0.067 s/op [Average]
  (min, avg, max) = (0.846, 0.907, 0.974), stdev = 0.044
  CI (99.9%): [0.841, 0.974] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 63.64% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 s/op
# Warmup Iteration   2: 0.071 s/op
# Warmup Iteration   3: 0.071 s/op
# Warmup Iteration   4: 0.073 s/op
# Warmup Iteration   5: 0.072 s/op
Iteration   1: 0.072 s/op
Iteration   2: 0.072 s/op
Iteration   3: 0.072 s/op
Iteration   4: 0.072 s/op
Iteration   5: 0.073 s/op
Iteration   6: 0.074 s/op
Iteration   7: 0.073 s/op
Iteration   8: 0.072 s/op
Iteration   9: 0.071 s/op
Iteration  10: 0.073 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  0.072 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.071, 0.072, 0.074), stdev = 0.001
  CI (99.9%): [0.071, 0.074] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 72.73% complete, ETA 00:07:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.306 s/op
# Warmup Iteration   2: 1.115 s/op
# Warmup Iteration   3: 0.917 s/op
# Warmup Iteration   4: 1.116 s/op
# Warmup Iteration   5: 1.081 s/op
Iteration   1: 1.063 s/op
Iteration   2: 1.174 s/op
Iteration   3: 1.141 s/op
Iteration   4: 0.971 s/op
Iteration   5: 1.047 s/op
Iteration   6: 1.086 s/op
Iteration   7: 1.081 s/op
Iteration   8: 1.083 s/op
Iteration   9: 1.081 s/op
Iteration  10: 1.095 s/op


Result "org.sample.ScanBenchmark.Scan":
  1.082 ±(99.9%) 0.081 s/op [Average]
  (min, avg, max) = (0.971, 1.082, 1.174), stdev = 0.054
  CI (99.9%): [1.001, 1.164] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 81.82% complete, ETA 00:05:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.657 s/op
# Warmup Iteration   2: 0.462 s/op
# Warmup Iteration   3: 0.520 s/op
# Warmup Iteration   4: 0.448 s/op
# Warmup Iteration   5: 0.553 s/op
Iteration   1: 0.462 s/op
Iteration   2: 0.654 s/op
Iteration   3: 0.456 s/op
Iteration   4: 0.501 s/op
Iteration   5: 0.457 s/op
Iteration   6: 0.469 s/op
Iteration   7: 0.452 s/op
Iteration   8: 0.469 s/op
Iteration   9: 0.461 s/op
Iteration  10: 0.525 s/op


Result "org.sample.SortBenchmark.Sort":
  0.491 ±(99.9%) 0.094 s/op [Average]
  (min, avg, max) = (0.452, 0.491, 0.654), stdev = 0.062
  CI (99.9%): [0.397, 0.584] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=72 -Djava.util.concurrent.ForkJoinPool.common.parallelism=72
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.91% complete, ETA 00:02:37
# Fork: 1 of 1
# Warmup Iteration   1: 1.172 s/op
# Warmup Iteration   2: 1.017 s/op
# Warmup Iteration   3: 0.914 s/op
# Warmup Iteration   4: 0.858 s/op
# Warmup Iteration   5: 0.866 s/op
Iteration   1: 0.967 s/op
Iteration   2: 0.892 s/op
Iteration   3: 0.942 s/op
Iteration   4: 0.951 s/op
Iteration   5: 1.013 s/op
Iteration   6: 0.966 s/op
Iteration   7: 1.003 s/op
Iteration   8: 0.950 s/op
Iteration   9: 1.004 s/op
Iteration  10: 0.968 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  0.966 ±(99.9%) 0.054 s/op [Average]
  (min, avg, max) = (0.892, 0.966, 1.013), stdev = 0.036
  CI (99.9%): [0.912, 1.020] (assumes normal distribution)


# Run complete. Total time: 00:28:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt  Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  0.702 ± 0.116   s/op
FibBenchmark.Fib                        avgt   10  0.044 ± 0.001   s/op
FilterBenchmark.Filter                  avgt   10  0.107 ± 0.008   s/op
HistogramBenchmark.Histogram            avgt   10  1.231 ± 0.256   s/op
MapMutBenchmark.MapMut                  avgt   10  0.410 ± 0.067   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10  0.307 ± 0.008   s/op
OurTabulateBenchmark.OurTabulate        avgt   10  0.907 ± 0.067   s/op
ReduceBenchmark.Reduce                  avgt   10  0.072 ± 0.001   s/op
ScanBenchmark.Scan                      avgt   10  1.082 ± 0.081   s/op
SortBenchmark.Sort                      avgt   10  0.491 ± 0.094   s/op
TabulateBenchmark.Tabulate              avgt   10  0.966 ± 0.054   s/op
