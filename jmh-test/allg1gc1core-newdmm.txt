# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ConcHashBenchmark.ConcHash

# Run progress: 0.00% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 7.699 s/op
# Warmup Iteration   2: 12.639 s/op
# Warmup Iteration   3: 6.207 s/op
# Warmup Iteration   4: 7.650 s/op
# Warmup Iteration   5: 7.821 s/op
Iteration   1: 6.329 s/op
Iteration   2: 10.238 s/op
Iteration   3: 17.207 s/op
Iteration   4: 6.152 s/op
Iteration   5: 10.717 s/op
Iteration   6: 11.451 s/op
Iteration   7: 7.440 s/op
Iteration   8: 10.824 s/op
Iteration   9: 10.417 s/op
Iteration  10: 17.238 s/op


Result "org.sample.ConcHashBenchmark.ConcHash":
  10.801 ±(99.9%) 5.883 s/op [Average]
  (min, avg, max) = (6.152, 10.801, 17.238), stdev = 3.891
  CI (99.9%): [4.919, 16.684] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FibBenchmark.Fib

# Run progress: 9.09% complete, ETA 00:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.340 s/op
# Warmup Iteration   2: 1.123 s/op
# Warmup Iteration   3: 1.219 s/op
# Warmup Iteration   4: 1.309 s/op
# Warmup Iteration   5: 1.173 s/op
Iteration   1: 1.235 s/op
Iteration   2: 1.187 s/op
Iteration   3: 1.247 s/op
Iteration   4: 1.409 s/op
Iteration   5: 1.374 s/op
Iteration   6: 1.410 s/op
Iteration   7: 1.277 s/op
Iteration   8: 1.271 s/op
Iteration   9: 1.285 s/op
Iteration  10: 1.165 s/op


Result "org.sample.FibBenchmark.Fib":
  1.286 ±(99.9%) 0.130 s/op [Average]
  (min, avg, max) = (1.165, 1.286, 1.410), stdev = 0.086
  CI (99.9%): [1.156, 1.417] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.FilterBenchmark.Filter

# Run progress: 18.18% complete, ETA 00:29:56
# Fork: 1 of 1
# Warmup Iteration   1: 1.296 s/op
# Warmup Iteration   2: 1.191 s/op
# Warmup Iteration   3: 1.111 s/op
# Warmup Iteration   4: 1.188 s/op
# Warmup Iteration   5: 1.148 s/op
Iteration   1: 1.129 s/op
Iteration   2: 1.062 s/op
Iteration   3: 1.080 s/op
Iteration   4: 1.147 s/op
Iteration   5: 1.149 s/op
Iteration   6: 1.129 s/op
Iteration   7: 0.941 s/op
Iteration   8: 1.157 s/op
Iteration   9: 1.114 s/op
Iteration  10: 1.175 s/op


Result "org.sample.FilterBenchmark.Filter":
  1.108 ±(99.9%) 0.103 s/op [Average]
  (min, avg, max) = (0.941, 1.108, 1.175), stdev = 0.068
  CI (99.9%): [1.005, 1.212] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.HistogramBenchmark.Histogram

# Run progress: 27.27% complete, ETA 00:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 10.695 s/op
# Warmup Iteration   2: 12.535 s/op
# Warmup Iteration   3: 13.944 s/op
# Warmup Iteration   4: 14.134 s/op
# Warmup Iteration   5: 15.282 s/op
Iteration   1: 15.914 s/op
Iteration   2: 19.936 s/op
Iteration   3: 15.418 s/op
Iteration   4: 13.422 s/op
Iteration   5: 13.930 s/op
Iteration   6: 15.032 s/op
Iteration   7: 17.987 s/op
Iteration   8: 13.821 s/op
Iteration   9: 20.083 s/op
Iteration  10: 10.177 s/op


Result "org.sample.HistogramBenchmark.Histogram":
  15.572 ±(99.9%) 4.650 s/op [Average]
  (min, avg, max) = (10.177, 15.572, 20.083), stdev = 3.076
  CI (99.9%): [10.922, 20.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MapMutBenchmark.MapMut

# Run progress: 36.36% complete, ETA 00:23:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.893 s/op
# Warmup Iteration   2: 2.609 s/op
# Warmup Iteration   3: 2.266 s/op
# Warmup Iteration   4: 2.269 s/op
# Warmup Iteration   5: 2.205 s/op
Iteration   1: 2.135 s/op
Iteration   2: 2.126 s/op
Iteration   3: 2.210 s/op
Iteration   4: 2.171 s/op
Iteration   5: 2.137 s/op
Iteration   6: 2.151 s/op
Iteration   7: 2.495 s/op
Iteration   8: 2.273 s/op
Iteration   9: 2.125 s/op
Iteration  10: 2.262 s/op


Result "org.sample.MapMutBenchmark.MapMut":
  2.208 ±(99.9%) 0.173 s/op [Average]
  (min, avg, max) = (2.125, 2.208, 2.495), stdev = 0.114
  CI (99.9%): [2.035, 2.381] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.MatrixMultiplyBenchmark.MatrixMultiply

# Run progress: 45.45% complete, ETA 00:19:47
# Fork: 1 of 1
# Warmup Iteration   1: 5.889 s/op
# Warmup Iteration   2: 5.290 s/op
# Warmup Iteration   3: 5.266 s/op
# Warmup Iteration   4: 4.996 s/op
# Warmup Iteration   5: 5.070 s/op
Iteration   1: 4.977 s/op
Iteration   2: 5.111 s/op
Iteration   3: 5.412 s/op
Iteration   4: 5.017 s/op
Iteration   5: 5.008 s/op
Iteration   6: 4.965 s/op
Iteration   7: 5.051 s/op
Iteration   8: 5.048 s/op
Iteration   9: 5.072 s/op
Iteration  10: 4.873 s/op


Result "org.sample.MatrixMultiplyBenchmark.MatrixMultiply":
  5.054 ±(99.9%) 0.215 s/op [Average]
  (min, avg, max) = (4.873, 5.054, 5.412), stdev = 0.142
  CI (99.9%): [4.839, 5.269] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.OurTabulateBenchmark.OurTabulate

# Run progress: 54.55% complete, ETA 00:15:58
# Fork: 1 of 1
# Warmup Iteration   1: 3.240 s/op
# Warmup Iteration   2: 3.075 s/op
# Warmup Iteration   3: 2.824 s/op
# Warmup Iteration   4: 2.745 s/op
# Warmup Iteration   5: 2.558 s/op
Iteration   1: 2.544 s/op
Iteration   2: 2.563 s/op
Iteration   3: 2.320 s/op
Iteration   4: 2.304 s/op
Iteration   5: 2.509 s/op
Iteration   6: 2.212 s/op
Iteration   7: 2.256 s/op
Iteration   8: 2.750 s/op
Iteration   9: 2.124 s/op
Iteration  10: 2.294 s/op


Result "org.sample.OurTabulateBenchmark.OurTabulate":
  2.387 ±(99.9%) 0.293 s/op [Average]
  (min, avg, max) = (2.124, 2.387, 2.750), stdev = 0.194
  CI (99.9%): [2.094, 2.681] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ReduceBenchmark.Reduce

# Run progress: 63.64% complete, ETA 00:12:35
# Fork: 1 of 1
# Warmup Iteration   1: 2.181 s/op
# Warmup Iteration   2: 1.895 s/op
# Warmup Iteration   3: 1.740 s/op
# Warmup Iteration   4: 1.761 s/op
# Warmup Iteration   5: 1.881 s/op
Iteration   1: 1.570 s/op
Iteration   2: 1.569 s/op
Iteration   3: 1.669 s/op
Iteration   4: 1.540 s/op
Iteration   5: 1.776 s/op
Iteration   6: 1.613 s/op
Iteration   7: 1.453 s/op
Iteration   8: 1.572 s/op
Iteration   9: 1.650 s/op
Iteration  10: 1.461 s/op


Result "org.sample.ReduceBenchmark.Reduce":
  1.587 ±(99.9%) 0.146 s/op [Average]
  (min, avg, max) = (1.453, 1.587, 1.776), stdev = 0.097
  CI (99.9%): [1.441, 1.733] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.ScanBenchmark.Scan

# Run progress: 72.73% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 6.238 s/op
# Warmup Iteration   2: 5.750 s/op
# Warmup Iteration   3: 5.276 s/op
# Warmup Iteration   4: 6.256 s/op
# Warmup Iteration   5: 4.615 s/op
Iteration   1: 5.074 s/op
Iteration   2: 5.819 s/op
Iteration   3: 5.119 s/op
Iteration   4: 5.374 s/op
Iteration   5: 5.115 s/op
Iteration   6: 5.098 s/op
Iteration   7: 6.327 s/op
Iteration   8: 6.006 s/op
Iteration   9: 6.137 s/op
Iteration  10: 6.047 s/op


Result "org.sample.ScanBenchmark.Scan":
  5.611 ±(99.9%) 0.760 s/op [Average]
  (min, avg, max) = (5.074, 5.611, 6.327), stdev = 0.503
  CI (99.9%): [4.851, 6.371] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.SortBenchmark.Sort

# Run progress: 81.82% complete, ETA 00:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 12.396 s/op
# Warmup Iteration   2: 12.551 s/op
# Warmup Iteration   3: 12.400 s/op
# Warmup Iteration   4: 11.591 s/op
# Warmup Iteration   5: 13.158 s/op
Iteration   1: 12.761 s/op
Iteration   2: 12.677 s/op
Iteration   3: 11.491 s/op
Iteration   4: 11.762 s/op
Iteration   5: 11.881 s/op
Iteration   6: 11.884 s/op
Iteration   7: 11.750 s/op
Iteration   8: 12.080 s/op
Iteration   9: 11.180 s/op
Iteration  10: 11.434 s/op


Result "org.sample.SortBenchmark.Sort":
  11.890 ±(99.9%) 0.768 s/op [Average]
  (min, avg, max) = (11.180, 11.890, 12.761), stdev = 0.508
  CI (99.9%): [11.122, 12.658] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UseG1GC -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.TabulateBenchmark.Tabulate

# Run progress: 90.91% complete, ETA 00:03:12
# Fork: 1 of 1
# Warmup Iteration   1: 3.120 s/op
# Warmup Iteration   2: 2.753 s/op
# Warmup Iteration   3: 2.632 s/op
# Warmup Iteration   4: 2.620 s/op
# Warmup Iteration   5: 2.539 s/op
Iteration   1: 2.267 s/op
Iteration   2: 2.155 s/op
Iteration   3: 2.137 s/op
Iteration   4: 2.198 s/op
Iteration   5: 2.256 s/op
Iteration   6: 2.079 s/op
Iteration   7: 1.977 s/op
Iteration   8: 2.356 s/op
Iteration   9: 2.048 s/op
Iteration  10: 2.296 s/op


Result "org.sample.TabulateBenchmark.Tabulate":
  2.177 ±(99.9%) 0.181 s/op [Average]
  (min, avg, max) = (1.977, 2.177, 2.356), stdev = 0.120
  CI (99.9%): [1.996, 2.358] (assumes normal distribution)


# Run complete. Total time: 00:34:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt   Score   Error  Units
ConcHashBenchmark.ConcHash              avgt   10  10.801 ± 5.883   s/op
FibBenchmark.Fib                        avgt   10   1.286 ± 0.130   s/op
FilterBenchmark.Filter                  avgt   10   1.108 ± 0.103   s/op
HistogramBenchmark.Histogram            avgt   10  15.572 ± 4.650   s/op
MapMutBenchmark.MapMut                  avgt   10   2.208 ± 0.173   s/op
MatrixMultiplyBenchmark.MatrixMultiply  avgt   10   5.054 ± 0.215   s/op
OurTabulateBenchmark.OurTabulate        avgt   10   2.387 ± 0.293   s/op
ReduceBenchmark.Reduce                  avgt   10   1.587 ± 0.146   s/op
ScanBenchmark.Scan                      avgt   10   5.611 ± 0.760   s/op
SortBenchmark.Sort                      avgt   10  11.890 ± 0.768   s/op
TabulateBenchmark.Tabulate              avgt   10   2.177 ± 0.181   s/op
